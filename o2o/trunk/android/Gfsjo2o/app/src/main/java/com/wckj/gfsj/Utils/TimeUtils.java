package com.wckj.gfsj.Utils;import java.sql.Timestamp;import java.text.SimpleDateFormat;import java.util.Date;/** * 关于时间工具类 * Created by zhangliang on 16/6/2. */public class TimeUtils{	private static SimpleDateFormat format;    /**     * 获取当前的时间     */    public static int  getSystemTime() {        long time = System.currentTimeMillis();        return (int) (time/1000);    }    /**     * 服务器返回的时间戳(精确到秒)转换 日期时间的转换     *     * @param times 时间戳     * @return     */    public static String showDateAndTime(int times) {        SimpleDateFormat format = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");        return format.format(new Date(times * 1000L));    }    /**     * 服务器返回的时间戳(精确到毫秒)转换 日期时间的转换     *     * @param times 时间戳     * @return     */    public static String showTime(long times) {        SimpleDateFormat format = new SimpleDateFormat("HH:mm");        return format.format(new Date(times * 1000L));    }    /**     * 时间格式转换     *     * @param time 时长  单位秒     * @return     */    public static String showAudioLengthTime(int time) {        int h = time / 3600;        int m = time / 60 % 60;        int s = time % 60;        if(time <= 0){            return "00:00";        }        if (time >= 3600)            return String.format("%02d:%02d:%02d", h, m, s);        else            return String.format("%02d:%02d", m, s);    }    /**     * 时间差算     *     * @param rf_time     发布时间     * @param lastrequest 当前时间     * @return     */    public static String timeFormate(long rf_time, long lastrequest) {        SimpleDateFormat df = new SimpleDateFormat("yy-MM-dd HH:mm:ss");        long l = (lastrequest - rf_time) * 1000;        long day = l / (24 * 60 * 60 * 1000);        long hour = (l / (60 * 60 * 1000) - day * 24);        long min = ((l / (60 * 1000)) - day * 24 * 60 - hour * 60);        long s = (l / 1000 - day * 24 * 60 * 60 - hour * 60 * 60 - min * 60);        if (day >= 7) {            return df.format(new Date(rf_time * 1000));        }        if (lastrequest <= rf_time) {            return 1 + "秒前";        }        if (day < 7 && day >= 1) {            return day + "天前";        }        if (hour >= 1 && hour < 24) {            return hour + "小时前";        }        if (min < 60 && min >= 1) {            return min + "分钟前";        }        if (s >= 1 && s < 60) {// 大于等于1秒小于1分钟            return s + "秒前";        }        return df.format(new Date(rf_time * 1000));    }	/**	 * 时间戳转日期格式	 *	 * @param times 时间戳	 * @return 同年则不返回年信息 同日则不返回日和月信息 否则返回 格式为 xx-x-x 中午/下午xx:xx	 */	public static String timestampReTime(long times) {		if (format == null) {			format = new SimpleDateFormat("yyyy-MM-dd HH:mm");		}		// android精确到豪秒，故需要		times *= 1000;		String letterTime = format.format(new Timestamp(times));		// 现在的时间		String newTime = format.format(new Date());		StringBuilder str = new StringBuilder();		// 年处理		if (!letterTime.substring(0, 4).equals(newTime.substring(0, 4))) {			str.append(letterTime.substring(0, 4));			str.append("-");		}		// 月日处理		if (!letterTime.substring(5, 10).equals(newTime.substring(5, 10))					|| str.length() > 0) {			str.append(letterTime.substring(5, 10));			str.append("  ");		}		// 时分处理		int hours = Integer.parseInt(letterTime.substring(11, 13));		if (hours < 6) {			str.append("早上");			str.append(letterTime.substring(11, 16));		} else if (hours < 12) {			str.append("上午");			str.append(letterTime.substring(11, 16));		} else if (hours < 18) {			str.append("下午");			str.append(letterTime.substring(11, 16));		} else {			str.append("晚上");			str.append(letterTime.substring(11, 16));		}		return str.toString();	}    /**     * 得到两个时间相差的秒数     *     * @param date1 时间1     * @param date2 时间2     * @return 相差的秒数     */    public static long timeDiff(Date date1, Date date2) {        long milliSec1 = date1.getTime();        long milliSec2 = date2.getTime();        long timeDifInMilliSec;        if (milliSec1 >= milliSec2) {            timeDifInMilliSec = milliSec1 - milliSec2;        } else {            timeDifInMilliSec = milliSec2 - milliSec1;        }        return timeDifInMilliSec/1000;    }}